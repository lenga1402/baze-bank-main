/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 model.gltf -t 
*/

import React, { useRef } from "react"
import { useGLTF } from "@react-three/drei"
import { useFrame } from "@react-three/fiber"
import type * as THREE from "three"
import { type GLTF } from "three-stdlib"

type GLTFResult = GLTF & {
  nodes: {
    knot_1: THREE.Mesh
    knot_2: THREE.Mesh
    knot_3: THREE.Mesh
    knot_4: THREE.Mesh
  }
  materials: {
    part1: THREE.MeshStandardMaterial
    part2: THREE.MeshStandardMaterial
    part3: THREE.MeshStandardMaterial
    part4: THREE.MeshStandardMaterial
  }
}

// type ContextType = Record<
//   string,
//   React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
// >

export function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group | null>(null)
  const { nodes, materials } = useGLTF("/model.gltf") as GLTFResult

  useFrame(() => {
    if (group.current) {
      group.current.rotateY(0.005)
    }
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.knot_1.geometry} material={materials.part1} />
        <mesh geometry={nodes.knot_2.geometry} material={materials.part2} />
        <mesh geometry={nodes.knot_3.geometry} material={materials.part3} />
        <mesh geometry={nodes.knot_4.geometry} material={materials.part4} />
      </group>
    </group>
  )
}

useGLTF.preload("/model.gltf")
