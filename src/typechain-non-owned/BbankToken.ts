/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BbankTokenInterface extends utils.Interface {
  functions: {
    "airdropToWallets(address[],uint256[])": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyLiquidityFee()": FunctionFragment;
    "buyMarketingFee()": FunctionFragment;
    "buyTotalFees()": FunctionFragment;
    "deadAddress()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "enableTrading()": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetTaxAmount()": FunctionFragment;
    "sellLiquidityFee()": FunctionFragment;
    "sellMarketingFee()": FunctionFragment;
    "sellTotalFees()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokensForLiquidity()": FunctionFragment;
    "tokensForMarketing()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingActive()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferLiquidityFee()": FunctionFragment;
    "transferMarketingFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTotalFees()": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateBFees(uint256,uint256)": FunctionFragment;
    "updateMarketingWallet(address)": FunctionFragment;
    "updateSFees(uint256,uint256)": FunctionFragment;
    "updateSwapEnabled(bool)": FunctionFragment;
    "updateTFees(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "airdropToWallets"
      | "allowance"
      | "approve"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "buyLiquidityFee"
      | "buyMarketingFee"
      | "buyTotalFees"
      | "deadAddress"
      | "decimals"
      | "decreaseAllowance"
      | "enableTrading"
      | "excludeFromFees"
      | "increaseAllowance"
      | "isExcludedFromFees"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "resetTaxAmount"
      | "sellLiquidityFee"
      | "sellMarketingFee"
      | "sellTotalFees"
      | "setAutomatedMarketMakerPair"
      | "swapEnabled"
      | "symbol"
      | "tokensForLiquidity"
      | "tokensForMarketing"
      | "totalSupply"
      | "tradingActive"
      | "transfer"
      | "transferFrom"
      | "transferLiquidityFee"
      | "transferMarketingFee"
      | "transferOwnership"
      | "transferTotalFees"
      | "uniswapV2Pair"
      | "uniswapV2Router"
      | "updateBFees"
      | "updateMarketingWallet"
      | "updateSFees"
      | "updateSwapEnabled"
      | "updateTFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "airdropToWallets",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deadAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetTaxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensForLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForMarketing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketingWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTFees",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "airdropToWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetTaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForMarketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTFees",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExcludeFromFees(address,bool)": EventFragment;
    "OwnerForcedSwapBack(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardTriggered(uint256)": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateUniswapV2Router(address,address)": EventFragment;
    "marketingWalletUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerForcedSwapBack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTriggered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUniswapV2Router"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "marketingWalletUpdated"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ExcludeFromFeesEventObject {
  account: string;
  isExcluded: boolean;
}
export type ExcludeFromFeesEvent = TypedEvent<
  [string, boolean],
  ExcludeFromFeesEventObject
>;

export type ExcludeFromFeesEventFilter = TypedEventFilter<ExcludeFromFeesEvent>;

export interface OwnerForcedSwapBackEventObject {
  timestamp: BigNumber;
}
export type OwnerForcedSwapBackEvent = TypedEvent<
  [BigNumber],
  OwnerForcedSwapBackEventObject
>;

export type OwnerForcedSwapBackEventFilter =
  TypedEventFilter<OwnerForcedSwapBackEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardTriggeredEventObject {
  amount: BigNumber;
}
export type RewardTriggeredEvent = TypedEvent<
  [BigNumber],
  RewardTriggeredEventObject
>;

export type RewardTriggeredEventFilter = TypedEventFilter<RewardTriggeredEvent>;

export interface SetAutomatedMarketMakerPairEventObject {
  pair: string;
  value: boolean;
}
export type SetAutomatedMarketMakerPairEvent = TypedEvent<
  [string, boolean],
  SetAutomatedMarketMakerPairEventObject
>;

export type SetAutomatedMarketMakerPairEventFilter =
  TypedEventFilter<SetAutomatedMarketMakerPairEvent>;

export interface SwapAndLiquifyEventObject {
  tokensSwapped: BigNumber;
  ethReceived: BigNumber;
  tokensIntoLiquidity: BigNumber;
}
export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SwapAndLiquifyEventObject
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateUniswapV2RouterEventObject {
  newAddress: string;
  oldAddress: string;
}
export type UpdateUniswapV2RouterEvent = TypedEvent<
  [string, string],
  UpdateUniswapV2RouterEventObject
>;

export type UpdateUniswapV2RouterEventFilter =
  TypedEventFilter<UpdateUniswapV2RouterEvent>;

export interface marketingWalletUpdatedEventObject {
  newWallet: string;
  oldWallet: string;
}
export type marketingWalletUpdatedEvent = TypedEvent<
  [string, string],
  marketingWalletUpdatedEventObject
>;

export type marketingWalletUpdatedEventFilter =
  TypedEventFilter<marketingWalletUpdatedEvent>;

export interface BbankToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BbankTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    airdropToWallets(
      airdropWallets: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyMarketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    deadAddress(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    resetTaxAmount(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellMarketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensForMarketing(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingActive(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferMarketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    updateBFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMarketingWallet(
      newMarketingWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSwapEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  airdropToWallets(
    airdropWallets: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  deadAddress(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enableTrading(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  excludeFromFees(
    account: string,
    excluded: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isExcludedFromFees(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  resetTaxAmount(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  setAutomatedMarketMakerPair(
    pair: string,
    value: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingActive(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  updateBFees(
    _marketingFee: BigNumberish,
    _liquidityFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMarketingWallet(
    newMarketingWallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSFees(
    _marketingFee: BigNumberish,
    _liquidityFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSwapEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTFees(
    _marketingFee: BigNumberish,
    _liquidityFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    airdropToWallets(
      airdropWallets: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    deadAddress(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableTrading(overrides?: CallOverrides): Promise<void>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetTaxAmount(overrides?: CallOverrides): Promise<void>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    updateBFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketingWallet(
      newMarketingWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSwapEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ExcludeFromFees(address,bool)"(
      account?: string | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;
    ExcludeFromFees(
      account?: string | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;

    "OwnerForcedSwapBack(uint256)"(
      timestamp?: null
    ): OwnerForcedSwapBackEventFilter;
    OwnerForcedSwapBack(timestamp?: null): OwnerForcedSwapBackEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RewardTriggered(uint256)"(amount?: null): RewardTriggeredEventFilter;
    RewardTriggered(amount?: null): RewardTriggeredEventFilter;

    "SetAutomatedMarketMakerPair(address,bool)"(
      pair?: string | null,
      value?: boolean | null
    ): SetAutomatedMarketMakerPairEventFilter;
    SetAutomatedMarketMakerPair(
      pair?: string | null,
      value?: boolean | null
    ): SetAutomatedMarketMakerPairEventFilter;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): SwapAndLiquifyEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UpdateUniswapV2Router(address,address)"(
      newAddress?: string | null,
      oldAddress?: string | null
    ): UpdateUniswapV2RouterEventFilter;
    UpdateUniswapV2Router(
      newAddress?: string | null,
      oldAddress?: string | null
    ): UpdateUniswapV2RouterEventFilter;

    "marketingWalletUpdated(address,address)"(
      newWallet?: string | null,
      oldWallet?: string | null
    ): marketingWalletUpdatedEventFilter;
    marketingWalletUpdated(
      newWallet?: string | null,
      oldWallet?: string | null
    ): marketingWalletUpdatedEventFilter;
  };

  estimateGas: {
    airdropToWallets(
      airdropWallets: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    deadAddress(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enableTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    resetTaxAmount(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    updateBFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMarketingWallet(
      newMarketingWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSwapEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    airdropToWallets(
      airdropWallets: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyMarketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deadAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    resetTaxAmount(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellMarketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensForLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForMarketing(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferLiquidityFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferMarketingFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMarketingWallet(
      newMarketingWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSwapEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
